openapi: 3.0.0
servers:
  - description: Local
    url: http://localhost:5000/
info:
  description: Server template for build-app. Project "full".
  version: '1.0.0'
  title: Full Template
tags:
  - name: 'User'
    description: 'Operations about user'
    externalDocs:
      description: 'Find out more about our store'
      url: 'http://swagger.io'
  - name: 'Category'
    description: 'Everything about your Categories'
    externalDocs:
      description: 'Find out more'
      url: 'http://swagger.io'
  - name: 'Record'
    description: 'Everything about Records'
security:
  - ApiKeyAuth: []
paths:
  /api/current-user:
    get:
      tags:
        - 'User'
      summary: Get current user
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/login:
    post:
      tags:
        - 'User'
      summary: user login
      operationId: userLogin
      description: |
        Login user by email/password
      security: []
      responses:
        '201':
          $ref: '#/components/responses/LoginResponse'
        '400':
          description: 'object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        description: User login info
  /api/sign-up:
    post:
      tags:
        - 'User'
      summary: user sign up
      operationId: userSignUp
      description: |
        Create new user with provided email/password
      security: []
      responses:
        '201':
          description: successfull sign up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: 'server error'
        '400':
          description: 'object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUpRequest'
        description: Sign up info (email/password)
  /api/activate/{token}:
    get:
      tags:
        - 'User'
      summary: user activation
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
            required: ['token']
            description: Activation token
      security: []
      responses:
        '200':
          description: successfully activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivationResponse'
  /api/password-forgot:
    post:
      tags:
        - 'User'
      summary: forget password
      operationId: forgotPassword
      description: |
        Forgot password
      security: []
      responses:
        '201':
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 'object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordForgotRequest'
        description: User email
  /api/password-reset/{token}:
    get:
      tags:
        - 'User'
      summary: reset password getter
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
            required: ['token']
            description: Reset password token
      security: []
      responses:
        '200':
          description: user found by reset token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
  /api/password-reset:
    post:
      tags:
        - 'User'
      summary: reset password
      operationId: resetPassword
      description: |
        Create new password for user
      security: []
      responses:
        '201':
          description: successfull reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 'object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        description: Reset password request
  /api/categories:
    get:
      tags:
        - 'Category'
      summary: Get all categories
      responses:
        '200':
          description: list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: 'Invalid status value'
  /api/category:
    post:
      tags:
        - 'Category'
      summary: Add new category to the data base
      operationId: categoryAdd
      responses:
        '200':
          description: category added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        description: Category object that needs to be added to the db
  /api/category/{id}:
    delete:
      tags:
        - 'Category'
      summary: Remove category by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            required: ['id']
            description: ID of the category to get
      responses:
        '200':
          description: category removed
  /api/records:
    get:
      tags:
        - 'Record'
      summary: Get all records
      parameters:
        - in: query
          name: sortBy
          required: true
          schema:
            type: string
            required: ['sortBy']
            description: Order to sort records
            enum:
              - 'date'
              - 'categoryId'
              - 'cost'
            default: 'date'
      responses:
        '200':
          description: list of records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
        '400':
          description: 'Invalid status value'
  /api/record:
    post:
      tags:
        - 'Record'
      summary: Add new record to the data base
      operationId: recordAdd
      responses:
        '200':
          description: record added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
        description: Record object that needs to be added to the db
  /api/record/{id}:
    delete:
      tags:
        - 'Record'
      summary: Remove record by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
            required: ['id']
            description: ID of the record to get
      responses:
        '200':
          description: record removed
components:
  securitySchemes:
    ApiKeyAuth:
      type: 'apiKey'
      in: 'header'
      name: 'Authorization'
  schemas:
    User:
      type: object
      required:
        - email
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        profile:
          type: object
    Record:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: 'date-time'
        cost:
          type: number
        note:
          type: string
        userId:
          type: integer
    Category:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        userId:
          type: integer
    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@test.com
        password:
          type: string
          example: 'password123'
    UserSignUpRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - confirmPassword
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
          example: user@test.com
        password:
          type: string
          example: 'password123'
        confirmPassword:
          type: string
    PasswordForgotRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    PasswordResetRequest:
      type: object
      required:
        - email
        - password
        - confirmPassword
        - token
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string
        token:
          type: string
    AuthResponse:
      type: object
      properties:
        message:
          type: string
    ActivationResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
    PasswordResetResponse:
      type: object
      properties:
        email:
          type: string
          format: email
        token:
          type: string
  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    LoginResponse:
      description: successfull login
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              token:
                type: string
